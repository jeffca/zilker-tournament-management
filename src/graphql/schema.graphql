scalar Date

input UpdateUserDetailsPayload {
  firstName: String
  lastName: String
  rating: Int
}
input UpdateMatchPayload {
  rating: Int!
}

type User {
  _id: String!
  firstName: String
  lastName: String
  phone: String!
  rating: Int
  token: String
  role: Role!
}

enum Role {
  admin
  player
}

enum MatchResult {
  whiteWon
  blackWon
  draw
  didNotStart
}

enum TournamentStatus {
  created
  active
  completed
}

type Match {
  _id: String!
  white: String!
  black: String!
  whiteRating: Int!
  blackRating: Int!
  boardNumber: Int!
  result: MatchResult!
  completed: Boolean!
}

type Standing {
  _id: ID!
  userId: String!
  position: Int!
  score: Float!
  win: Int!
  loss: Int!
  draw: Int!
  bye: Int!
}

type Round {
  _id: String!
  completed: Boolean!
  matches: [Match!]!
}

type RoundPreview {
  _id: String!
  completed: Boolean!
  matches: [String!]!
}

type Tournament {
  _id: String!
  name: String!
  date: Date!
  status: TournamentStatus!
  players: [String!]!
  rounds: [RoundPreview!]!
  standings: [Standing!]!
  totalRounds: Int!
}

type Query {
  me: User
  getUser(userId: ID!): User
  getUsers(userIds: [ID!]!, filterTerm: String): [User!]!

  getActiveTournament: Tournament
  getTournaments: [Tournament!]!
  getTournament(tournamentId: ID!): Tournament

  getMatch(matchId: ID!): Match
  getMyMatch: Match
  getRound(tournamentId: ID!, roundId: ID!): Round
}

type Mutation {
  updateUserDetails(payload: UpdateUserDetailsPayload!): Boolean!

  sendVerificationCode(phone: String!): Boolean!
  verifyCode(code: String!): User!

  createTournament(name: String!): Boolean!
  joinTournament(tournamentId: ID!, userId: ID!): Boolean!
  kickPlayer(tournamentId: ID!, userId: ID!): Boolean!
  completeRound(tournamentId: ID!, newRound: Boolean!): Boolean!
  deleteRound(tournamentId: ID!, roundId: ID!): Boolean!

  updateMatch(matchId: ID!, payload: UpdateMatchPayload!): Boolean!
  deleteMatch(tournamentId: ID!, roundId: ID!, matchId: ID!): Boolean!
}