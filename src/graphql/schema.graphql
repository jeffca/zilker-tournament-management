scalar Date

input UpdateUserDetailsArgs {
  firstName: String!
  lastName: String!
  rating: Int!
}

type User {
  _id: String!
  firstName: String
  lastName: String
  phone: String!
  rating: Int
  token: String
  role: Role!
}

enum Role {
  admin
  player
}

enum MatchResult {
  whiteWon
  blackWon
  draw
  didNotStart
}

enum TournamentStatus {
  inactive
  completed
  registration
}

type Match {
  white: User!
  black: User!
  result: MatchResult
}

type Round {
  completed: Boolean!
  matches: [String!]!
}

type Tournament {
  _id: String!
  name: String!
  date: Date!
  status: TournamentStatus!
  players: [String!]!
  rounds: [Round!]!
}


type Mutation {
  updateUserDetails(args: UpdateUserDetailsArgs!): Boolean!
  sendVerificationCode(phone: String!): Boolean!
  verifyCode(code: String!): User!
  createTournament(name: String!): Boolean!
  joinTournament(tournamentId: String!, userId: String!): Boolean!
  nextRound(tournamentId: String!): Boolean!
}

type Query {
  me: User
  getActiveTournament: Tournament!
  getTournaments: [Tournament!]!
  getTournament(tournamentId: String!): Tournament!
}